/* This file was generated by upbc (the upb compiler) from the input
 * file:
 *
 *     pprof.proto
 *
 * Do not edit -- your changes will be discarded when the file is
 * regenerated. */

#ifndef PPROF_PROTO_UPB_H_
#define PPROF_PROTO_UPB_H_

#include "upb/msg_internal.h"
#include "upb/decode.h"
#include "upb/decode_fast.h"
#include "upb/encode.h"

#include "upb/port_def.inc"

#ifdef __cplusplus
extern "C" {
#endif

struct perftools_profiles_Profile;
struct perftools_profiles_ValueType;
struct perftools_profiles_Sample;
struct perftools_profiles_Label;
struct perftools_profiles_Mapping;
struct perftools_profiles_Location;
struct perftools_profiles_Line;
struct perftools_profiles_Function;
typedef struct perftools_profiles_Profile perftools_profiles_Profile;
typedef struct perftools_profiles_ValueType perftools_profiles_ValueType;
typedef struct perftools_profiles_Sample perftools_profiles_Sample;
typedef struct perftools_profiles_Label perftools_profiles_Label;
typedef struct perftools_profiles_Mapping perftools_profiles_Mapping;
typedef struct perftools_profiles_Location perftools_profiles_Location;
typedef struct perftools_profiles_Line perftools_profiles_Line;
typedef struct perftools_profiles_Function perftools_profiles_Function;
extern const upb_MiniTable perftools_profiles_Profile_msginit;
extern const upb_MiniTable perftools_profiles_ValueType_msginit;
extern const upb_MiniTable perftools_profiles_Sample_msginit;
extern const upb_MiniTable perftools_profiles_Label_msginit;
extern const upb_MiniTable perftools_profiles_Mapping_msginit;
extern const upb_MiniTable perftools_profiles_Location_msginit;
extern const upb_MiniTable perftools_profiles_Line_msginit;
extern const upb_MiniTable perftools_profiles_Function_msginit;



/* perftools.profiles.Profile */

UPB_INLINE perftools_profiles_Profile* perftools_profiles_Profile_new(upb_Arena* arena) {
  return (perftools_profiles_Profile*)_upb_Message_New(&perftools_profiles_Profile_msginit, arena);
}
UPB_INLINE perftools_profiles_Profile* perftools_profiles_Profile_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Profile* ret = perftools_profiles_Profile_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Profile_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Profile* perftools_profiles_Profile_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Profile* ret = perftools_profiles_Profile_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Profile_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Profile_serialize(const perftools_profiles_Profile* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Profile_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Profile_serialize_ex(const perftools_profiles_Profile* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Profile_msginit, options, arena, len);
}
UPB_INLINE bool perftools_profiles_Profile_has_sample_type(const perftools_profiles_Profile* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(4, 8));
}
UPB_INLINE void perftools_profiles_Profile_clear_sample_type(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(4, 8));
}
UPB_INLINE const perftools_profiles_ValueType* const* perftools_profiles_Profile_sample_type(const perftools_profiles_Profile* msg, size_t* len) {
  return (const perftools_profiles_ValueType* const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE bool perftools_profiles_Profile_has_sample(const perftools_profiles_Profile* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16));
}
UPB_INLINE void perftools_profiles_Profile_clear_sample(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(8, 16));
}
UPB_INLINE const perftools_profiles_Sample* const* perftools_profiles_Profile_sample(const perftools_profiles_Profile* msg, size_t* len) {
  return (const perftools_profiles_Sample* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE bool perftools_profiles_Profile_has_mapping(const perftools_profiles_Profile* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(12, 24));
}
UPB_INLINE void perftools_profiles_Profile_clear_mapping(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(12, 24));
}
UPB_INLINE const perftools_profiles_Mapping* const* perftools_profiles_Profile_mapping(const perftools_profiles_Profile* msg, size_t* len) {
  return (const perftools_profiles_Mapping* const*)_upb_array_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE bool perftools_profiles_Profile_has_location(const perftools_profiles_Profile* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(16, 32));
}
UPB_INLINE void perftools_profiles_Profile_clear_location(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(16, 32));
}
UPB_INLINE const perftools_profiles_Location* const* perftools_profiles_Profile_location(const perftools_profiles_Profile* msg, size_t* len) {
  return (const perftools_profiles_Location* const*)_upb_array_accessor(msg, UPB_SIZE(16, 32), len);
}
UPB_INLINE bool perftools_profiles_Profile_has_function(const perftools_profiles_Profile* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(20, 40));
}
UPB_INLINE void perftools_profiles_Profile_clear_function(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(20, 40));
}
UPB_INLINE const perftools_profiles_Function* const* perftools_profiles_Profile_function(const perftools_profiles_Profile* msg, size_t* len) {
  return (const perftools_profiles_Function* const*)_upb_array_accessor(msg, UPB_SIZE(20, 40), len);
}
UPB_INLINE void perftools_profiles_Profile_clear_string_table(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(24, 48));
}
UPB_INLINE upb_StringView const* perftools_profiles_Profile_string_table(const perftools_profiles_Profile* msg, size_t* len) {
  return (upb_StringView const*)_upb_array_accessor(msg, UPB_SIZE(24, 48), len);
}
UPB_INLINE void perftools_profiles_Profile_clear_drop_frames(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(40, 72), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Profile_drop_frames(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(40, 72), int64_t);
}
UPB_INLINE void perftools_profiles_Profile_clear_keep_frames(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(48, 80), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Profile_keep_frames(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(48, 80), int64_t);
}
UPB_INLINE void perftools_profiles_Profile_clear_time_nanos(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(56, 88), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Profile_time_nanos(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(56, 88), int64_t);
}
UPB_INLINE void perftools_profiles_Profile_clear_duration_nanos(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(64, 96), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Profile_duration_nanos(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(64, 96), int64_t);
}
UPB_INLINE bool perftools_profiles_Profile_has_period_type(const perftools_profiles_Profile* msg) {
  return _upb_hasbit(msg, 1);
}
UPB_INLINE void perftools_profiles_Profile_clear_period_type(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(28, 56), const upb_Message*) = NULL;
}
UPB_INLINE const perftools_profiles_ValueType* perftools_profiles_Profile_period_type(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(28, 56), const perftools_profiles_ValueType*);
}
UPB_INLINE void perftools_profiles_Profile_clear_period(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(72, 104), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Profile_period(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(72, 104), int64_t);
}
UPB_INLINE void perftools_profiles_Profile_clear_comment(const perftools_profiles_Profile* msg) {
  _upb_array_detach(msg, UPB_SIZE(32, 64));
}
UPB_INLINE int64_t const* perftools_profiles_Profile_comment(const perftools_profiles_Profile* msg, size_t* len) {
  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(32, 64), len);
}
UPB_INLINE void perftools_profiles_Profile_clear_default_sample_type(const perftools_profiles_Profile* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(80, 112), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Profile_default_sample_type(const perftools_profiles_Profile* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(80, 112), int64_t);
}

UPB_INLINE perftools_profiles_ValueType** perftools_profiles_Profile_mutable_sample_type(perftools_profiles_Profile* msg, size_t* len) {
  return (perftools_profiles_ValueType**)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE perftools_profiles_ValueType** perftools_profiles_Profile_resize_sample_type(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_ValueType**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(4, 8), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_ValueType* perftools_profiles_Profile_add_sample_type(perftools_profiles_Profile* msg, upb_Arena* arena) {
  struct perftools_profiles_ValueType* sub = (struct perftools_profiles_ValueType*)_upb_Message_New(&perftools_profiles_ValueType_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(4, 8), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE perftools_profiles_Sample** perftools_profiles_Profile_mutable_sample(perftools_profiles_Profile* msg, size_t* len) {
  return (perftools_profiles_Sample**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE perftools_profiles_Sample** perftools_profiles_Profile_resize_sample(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_Sample**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_Sample* perftools_profiles_Profile_add_sample(perftools_profiles_Profile* msg, upb_Arena* arena) {
  struct perftools_profiles_Sample* sub = (struct perftools_profiles_Sample*)_upb_Message_New(&perftools_profiles_Sample_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE perftools_profiles_Mapping** perftools_profiles_Profile_mutable_mapping(perftools_profiles_Profile* msg, size_t* len) {
  return (perftools_profiles_Mapping**)_upb_array_mutable_accessor(msg, UPB_SIZE(12, 24), len);
}
UPB_INLINE perftools_profiles_Mapping** perftools_profiles_Profile_resize_mapping(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_Mapping**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(12, 24), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_Mapping* perftools_profiles_Profile_add_mapping(perftools_profiles_Profile* msg, upb_Arena* arena) {
  struct perftools_profiles_Mapping* sub = (struct perftools_profiles_Mapping*)_upb_Message_New(&perftools_profiles_Mapping_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(12, 24), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE perftools_profiles_Location** perftools_profiles_Profile_mutable_location(perftools_profiles_Profile* msg, size_t* len) {
  return (perftools_profiles_Location**)_upb_array_mutable_accessor(msg, UPB_SIZE(16, 32), len);
}
UPB_INLINE perftools_profiles_Location** perftools_profiles_Profile_resize_location(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_Location**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(16, 32), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_Location* perftools_profiles_Profile_add_location(perftools_profiles_Profile* msg, upb_Arena* arena) {
  struct perftools_profiles_Location* sub = (struct perftools_profiles_Location*)_upb_Message_New(&perftools_profiles_Location_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(16, 32), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE perftools_profiles_Function** perftools_profiles_Profile_mutable_function(perftools_profiles_Profile* msg, size_t* len) {
  return (perftools_profiles_Function**)_upb_array_mutable_accessor(msg, UPB_SIZE(20, 40), len);
}
UPB_INLINE perftools_profiles_Function** perftools_profiles_Profile_resize_function(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_Function**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(20, 40), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_Function* perftools_profiles_Profile_add_function(perftools_profiles_Profile* msg, upb_Arena* arena) {
  struct perftools_profiles_Function* sub = (struct perftools_profiles_Function*)_upb_Message_New(&perftools_profiles_Function_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(20, 40), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE upb_StringView* perftools_profiles_Profile_mutable_string_table(perftools_profiles_Profile* msg, size_t* len) {
  return (upb_StringView*)_upb_array_mutable_accessor(msg, UPB_SIZE(24, 48), len);
}
UPB_INLINE upb_StringView* perftools_profiles_Profile_resize_string_table(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (upb_StringView*)_upb_Array_Resize_accessor2(msg, UPB_SIZE(24, 48), len, UPB_SIZE(3, 4), arena);
}
UPB_INLINE bool perftools_profiles_Profile_add_string_table(perftools_profiles_Profile* msg, upb_StringView val, upb_Arena* arena) {
  return _upb_Array_Append_accessor2(msg, UPB_SIZE(24, 48), UPB_SIZE(3, 4), &val, arena);
}
UPB_INLINE void perftools_profiles_Profile_set_drop_frames(perftools_profiles_Profile *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(40, 72), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Profile_set_keep_frames(perftools_profiles_Profile *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(48, 80), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Profile_set_time_nanos(perftools_profiles_Profile *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(56, 88), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Profile_set_duration_nanos(perftools_profiles_Profile *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(64, 96), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Profile_set_period_type(perftools_profiles_Profile *msg, perftools_profiles_ValueType* value) {
  _upb_sethas(msg, 1);
  *UPB_PTR_AT(msg, UPB_SIZE(28, 56), perftools_profiles_ValueType*) = value;
}
UPB_INLINE struct perftools_profiles_ValueType* perftools_profiles_Profile_mutable_period_type(perftools_profiles_Profile* msg, upb_Arena* arena) {
  struct perftools_profiles_ValueType* sub = (struct perftools_profiles_ValueType*)perftools_profiles_Profile_period_type(msg);
  if (sub == NULL) {
    sub = (struct perftools_profiles_ValueType*)_upb_Message_New(&perftools_profiles_ValueType_msginit, arena);
    if (!sub) return NULL;
    perftools_profiles_Profile_set_period_type(msg, sub);
  }
  return sub;
}
UPB_INLINE void perftools_profiles_Profile_set_period(perftools_profiles_Profile *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(72, 104), int64_t) = value;
}
UPB_INLINE int64_t* perftools_profiles_Profile_mutable_comment(perftools_profiles_Profile* msg, size_t* len) {
  return (int64_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(32, 64), len);
}
UPB_INLINE int64_t* perftools_profiles_Profile_resize_comment(perftools_profiles_Profile* msg, size_t len, upb_Arena* arena) {
  return (int64_t*)_upb_Array_Resize_accessor2(msg, UPB_SIZE(32, 64), len, 3, arena);
}
UPB_INLINE bool perftools_profiles_Profile_add_comment(perftools_profiles_Profile* msg, int64_t val, upb_Arena* arena) {
  return _upb_Array_Append_accessor2(msg, UPB_SIZE(32, 64), 3, &val, arena);
}
UPB_INLINE void perftools_profiles_Profile_set_default_sample_type(perftools_profiles_Profile *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(80, 112), int64_t) = value;
}

/* perftools.profiles.ValueType */

UPB_INLINE perftools_profiles_ValueType* perftools_profiles_ValueType_new(upb_Arena* arena) {
  return (perftools_profiles_ValueType*)_upb_Message_New(&perftools_profiles_ValueType_msginit, arena);
}
UPB_INLINE perftools_profiles_ValueType* perftools_profiles_ValueType_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_ValueType* ret = perftools_profiles_ValueType_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_ValueType_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_ValueType* perftools_profiles_ValueType_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_ValueType* ret = perftools_profiles_ValueType_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_ValueType_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_ValueType_serialize(const perftools_profiles_ValueType* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_ValueType_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_ValueType_serialize_ex(const perftools_profiles_ValueType* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_ValueType_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_ValueType_clear_type(const perftools_profiles_ValueType* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_ValueType_type(const perftools_profiles_ValueType* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int64_t);
}
UPB_INLINE void perftools_profiles_ValueType_clear_unit(const perftools_profiles_ValueType* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_ValueType_unit(const perftools_profiles_ValueType* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t);
}

UPB_INLINE void perftools_profiles_ValueType_set_type(perftools_profiles_ValueType *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int64_t) = value;
}
UPB_INLINE void perftools_profiles_ValueType_set_unit(perftools_profiles_ValueType *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = value;
}

/* perftools.profiles.Sample */

UPB_INLINE perftools_profiles_Sample* perftools_profiles_Sample_new(upb_Arena* arena) {
  return (perftools_profiles_Sample*)_upb_Message_New(&perftools_profiles_Sample_msginit, arena);
}
UPB_INLINE perftools_profiles_Sample* perftools_profiles_Sample_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Sample* ret = perftools_profiles_Sample_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Sample_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Sample* perftools_profiles_Sample_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Sample* ret = perftools_profiles_Sample_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Sample_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Sample_serialize(const perftools_profiles_Sample* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Sample_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Sample_serialize_ex(const perftools_profiles_Sample* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Sample_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_Sample_clear_location_id(const perftools_profiles_Sample* msg) {
  _upb_array_detach(msg, UPB_SIZE(0, 0));
}
UPB_INLINE uint64_t const* perftools_profiles_Sample_location_id(const perftools_profiles_Sample* msg, size_t* len) {
  return (uint64_t const*)_upb_array_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE void perftools_profiles_Sample_clear_value(const perftools_profiles_Sample* msg) {
  _upb_array_detach(msg, UPB_SIZE(4, 8));
}
UPB_INLINE int64_t const* perftools_profiles_Sample_value(const perftools_profiles_Sample* msg, size_t* len) {
  return (int64_t const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE bool perftools_profiles_Sample_has_label(const perftools_profiles_Sample* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(8, 16));
}
UPB_INLINE void perftools_profiles_Sample_clear_label(const perftools_profiles_Sample* msg) {
  _upb_array_detach(msg, UPB_SIZE(8, 16));
}
UPB_INLINE const perftools_profiles_Label* const* perftools_profiles_Sample_label(const perftools_profiles_Sample* msg, size_t* len) {
  return (const perftools_profiles_Label* const*)_upb_array_accessor(msg, UPB_SIZE(8, 16), len);
}

UPB_INLINE uint64_t* perftools_profiles_Sample_mutable_location_id(perftools_profiles_Sample* msg, size_t* len) {
  return (uint64_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(0, 0), len);
}
UPB_INLINE uint64_t* perftools_profiles_Sample_resize_location_id(perftools_profiles_Sample* msg, size_t len, upb_Arena* arena) {
  return (uint64_t*)_upb_Array_Resize_accessor2(msg, UPB_SIZE(0, 0), len, 3, arena);
}
UPB_INLINE bool perftools_profiles_Sample_add_location_id(perftools_profiles_Sample* msg, uint64_t val, upb_Arena* arena) {
  return _upb_Array_Append_accessor2(msg, UPB_SIZE(0, 0), 3, &val, arena);
}
UPB_INLINE int64_t* perftools_profiles_Sample_mutable_value(perftools_profiles_Sample* msg, size_t* len) {
  return (int64_t*)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE int64_t* perftools_profiles_Sample_resize_value(perftools_profiles_Sample* msg, size_t len, upb_Arena* arena) {
  return (int64_t*)_upb_Array_Resize_accessor2(msg, UPB_SIZE(4, 8), len, 3, arena);
}
UPB_INLINE bool perftools_profiles_Sample_add_value(perftools_profiles_Sample* msg, int64_t val, upb_Arena* arena) {
  return _upb_Array_Append_accessor2(msg, UPB_SIZE(4, 8), 3, &val, arena);
}
UPB_INLINE perftools_profiles_Label** perftools_profiles_Sample_mutable_label(perftools_profiles_Sample* msg, size_t* len) {
  return (perftools_profiles_Label**)_upb_array_mutable_accessor(msg, UPB_SIZE(8, 16), len);
}
UPB_INLINE perftools_profiles_Label** perftools_profiles_Sample_resize_label(perftools_profiles_Sample* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_Label**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(8, 16), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_Label* perftools_profiles_Sample_add_label(perftools_profiles_Sample* msg, upb_Arena* arena) {
  struct perftools_profiles_Label* sub = (struct perftools_profiles_Label*)_upb_Message_New(&perftools_profiles_Label_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(8, 16), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}

/* perftools.profiles.Label */

UPB_INLINE perftools_profiles_Label* perftools_profiles_Label_new(upb_Arena* arena) {
  return (perftools_profiles_Label*)_upb_Message_New(&perftools_profiles_Label_msginit, arena);
}
UPB_INLINE perftools_profiles_Label* perftools_profiles_Label_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Label* ret = perftools_profiles_Label_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Label_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Label* perftools_profiles_Label_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Label* ret = perftools_profiles_Label_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Label_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Label_serialize(const perftools_profiles_Label* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Label_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Label_serialize_ex(const perftools_profiles_Label* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Label_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_Label_clear_key(const perftools_profiles_Label* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Label_key(const perftools_profiles_Label* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int64_t);
}
UPB_INLINE void perftools_profiles_Label_clear_str(const perftools_profiles_Label* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Label_str(const perftools_profiles_Label* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t);
}
UPB_INLINE void perftools_profiles_Label_clear_num(const perftools_profiles_Label* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Label_num(const perftools_profiles_Label* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int64_t);
}
UPB_INLINE void perftools_profiles_Label_clear_num_unit(const perftools_profiles_Label* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Label_num_unit(const perftools_profiles_Label* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(24, 24), int64_t);
}

UPB_INLINE void perftools_profiles_Label_set_key(perftools_profiles_Label *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Label_set_str(perftools_profiles_Label *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Label_set_num(perftools_profiles_Label *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Label_set_num_unit(perftools_profiles_Label *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), int64_t) = value;
}

/* perftools.profiles.Mapping */

UPB_INLINE perftools_profiles_Mapping* perftools_profiles_Mapping_new(upb_Arena* arena) {
  return (perftools_profiles_Mapping*)_upb_Message_New(&perftools_profiles_Mapping_msginit, arena);
}
UPB_INLINE perftools_profiles_Mapping* perftools_profiles_Mapping_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Mapping* ret = perftools_profiles_Mapping_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Mapping_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Mapping* perftools_profiles_Mapping_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Mapping* ret = perftools_profiles_Mapping_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Mapping_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Mapping_serialize(const perftools_profiles_Mapping* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Mapping_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Mapping_serialize_ex(const perftools_profiles_Mapping* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Mapping_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_Mapping_clear_id(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Mapping_id(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t);
}
UPB_INLINE void perftools_profiles_Mapping_clear_memory_start(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Mapping_memory_start(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(16, 16), uint64_t);
}
UPB_INLINE void perftools_profiles_Mapping_clear_memory_limit(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Mapping_memory_limit(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(24, 24), uint64_t);
}
UPB_INLINE void perftools_profiles_Mapping_clear_file_offset(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(32, 32), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Mapping_file_offset(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(32, 32), uint64_t);
}
UPB_INLINE void perftools_profiles_Mapping_clear_filename(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(40, 40), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Mapping_filename(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(40, 40), int64_t);
}
UPB_INLINE void perftools_profiles_Mapping_clear_build_id(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(48, 48), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Mapping_build_id(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(48, 48), int64_t);
}
UPB_INLINE void perftools_profiles_Mapping_clear_has_functions(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool) = 0;
}
UPB_INLINE bool perftools_profiles_Mapping_has_functions(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool);
}
UPB_INLINE void perftools_profiles_Mapping_clear_has_filenames(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool) = 0;
}
UPB_INLINE bool perftools_profiles_Mapping_has_filenames(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool);
}
UPB_INLINE void perftools_profiles_Mapping_clear_has_line_numbers(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(2, 2), bool) = 0;
}
UPB_INLINE bool perftools_profiles_Mapping_has_line_numbers(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(2, 2), bool);
}
UPB_INLINE void perftools_profiles_Mapping_clear_has_inline_frames(const perftools_profiles_Mapping* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(3, 3), bool) = 0;
}
UPB_INLINE bool perftools_profiles_Mapping_has_inline_frames(const perftools_profiles_Mapping* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(3, 3), bool);
}

UPB_INLINE void perftools_profiles_Mapping_set_id(perftools_profiles_Mapping *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_memory_start(perftools_profiles_Mapping *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_memory_limit(perftools_profiles_Mapping *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_file_offset(perftools_profiles_Mapping *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(32, 32), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_filename(perftools_profiles_Mapping *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(40, 40), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_build_id(perftools_profiles_Mapping *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(48, 48), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_has_functions(perftools_profiles_Mapping *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_has_filenames(perftools_profiles_Mapping *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(1, 1), bool) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_has_line_numbers(perftools_profiles_Mapping *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(2, 2), bool) = value;
}
UPB_INLINE void perftools_profiles_Mapping_set_has_inline_frames(perftools_profiles_Mapping *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(3, 3), bool) = value;
}

/* perftools.profiles.Location */

UPB_INLINE perftools_profiles_Location* perftools_profiles_Location_new(upb_Arena* arena) {
  return (perftools_profiles_Location*)_upb_Message_New(&perftools_profiles_Location_msginit, arena);
}
UPB_INLINE perftools_profiles_Location* perftools_profiles_Location_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Location* ret = perftools_profiles_Location_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Location_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Location* perftools_profiles_Location_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Location* ret = perftools_profiles_Location_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Location_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Location_serialize(const perftools_profiles_Location* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Location_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Location_serialize_ex(const perftools_profiles_Location* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Location_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_Location_clear_id(const perftools_profiles_Location* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Location_id(const perftools_profiles_Location* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(8, 16), uint64_t);
}
UPB_INLINE void perftools_profiles_Location_clear_mapping_id(const perftools_profiles_Location* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 24), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Location_mapping_id(const perftools_profiles_Location* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(16, 24), uint64_t);
}
UPB_INLINE void perftools_profiles_Location_clear_address(const perftools_profiles_Location* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 32), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Location_address(const perftools_profiles_Location* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(24, 32), uint64_t);
}
UPB_INLINE bool perftools_profiles_Location_has_line(const perftools_profiles_Location* msg) {
  return _upb_has_submsg_nohasbit(msg, UPB_SIZE(4, 8));
}
UPB_INLINE void perftools_profiles_Location_clear_line(const perftools_profiles_Location* msg) {
  _upb_array_detach(msg, UPB_SIZE(4, 8));
}
UPB_INLINE const perftools_profiles_Line* const* perftools_profiles_Location_line(const perftools_profiles_Location* msg, size_t* len) {
  return (const perftools_profiles_Line* const*)_upb_array_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE void perftools_profiles_Location_clear_is_folded(const perftools_profiles_Location* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool) = 0;
}
UPB_INLINE bool perftools_profiles_Location_is_folded(const perftools_profiles_Location* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool);
}

UPB_INLINE void perftools_profiles_Location_set_id(perftools_profiles_Location *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 16), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Location_set_mapping_id(perftools_profiles_Location *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 24), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Location_set_address(perftools_profiles_Location *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 32), uint64_t) = value;
}
UPB_INLINE perftools_profiles_Line** perftools_profiles_Location_mutable_line(perftools_profiles_Location* msg, size_t* len) {
  return (perftools_profiles_Line**)_upb_array_mutable_accessor(msg, UPB_SIZE(4, 8), len);
}
UPB_INLINE perftools_profiles_Line** perftools_profiles_Location_resize_line(perftools_profiles_Location* msg, size_t len, upb_Arena* arena) {
  return (perftools_profiles_Line**)_upb_Array_Resize_accessor2(msg, UPB_SIZE(4, 8), len, UPB_SIZE(2, 3), arena);
}
UPB_INLINE struct perftools_profiles_Line* perftools_profiles_Location_add_line(perftools_profiles_Location* msg, upb_Arena* arena) {
  struct perftools_profiles_Line* sub = (struct perftools_profiles_Line*)_upb_Message_New(&perftools_profiles_Line_msginit, arena);
  bool ok = _upb_Array_Append_accessor2(msg, UPB_SIZE(4, 8), UPB_SIZE(2, 3), &sub, arena);
  if (!ok) return NULL;
  return sub;
}
UPB_INLINE void perftools_profiles_Location_set_is_folded(perftools_profiles_Location *msg, bool value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), bool) = value;
}

/* perftools.profiles.Line */

UPB_INLINE perftools_profiles_Line* perftools_profiles_Line_new(upb_Arena* arena) {
  return (perftools_profiles_Line*)_upb_Message_New(&perftools_profiles_Line_msginit, arena);
}
UPB_INLINE perftools_profiles_Line* perftools_profiles_Line_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Line* ret = perftools_profiles_Line_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Line_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Line* perftools_profiles_Line_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Line* ret = perftools_profiles_Line_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Line_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Line_serialize(const perftools_profiles_Line* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Line_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Line_serialize_ex(const perftools_profiles_Line* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Line_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_Line_clear_function_id(const perftools_profiles_Line* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Line_function_id(const perftools_profiles_Line* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t);
}
UPB_INLINE void perftools_profiles_Line_clear_line(const perftools_profiles_Line* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Line_line(const perftools_profiles_Line* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t);
}

UPB_INLINE void perftools_profiles_Line_set_function_id(perftools_profiles_Line *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Line_set_line(perftools_profiles_Line *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = value;
}

/* perftools.profiles.Function */

UPB_INLINE perftools_profiles_Function* perftools_profiles_Function_new(upb_Arena* arena) {
  return (perftools_profiles_Function*)_upb_Message_New(&perftools_profiles_Function_msginit, arena);
}
UPB_INLINE perftools_profiles_Function* perftools_profiles_Function_parse(const char* buf, size_t size, upb_Arena* arena) {
  perftools_profiles_Function* ret = perftools_profiles_Function_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Function_msginit, NULL, 0, arena) != kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE perftools_profiles_Function* perftools_profiles_Function_parse_ex(const char* buf, size_t size,
                           const upb_ExtensionRegistry* extreg,
                           int options, upb_Arena* arena) {
  perftools_profiles_Function* ret = perftools_profiles_Function_new(arena);
  if (!ret) return NULL;
  if (upb_Decode(buf, size, ret, &perftools_profiles_Function_msginit, extreg, options, arena) !=
      kUpb_DecodeStatus_Ok) {
    return NULL;
  }
  return ret;
}
UPB_INLINE char* perftools_profiles_Function_serialize(const perftools_profiles_Function* msg, upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Function_msginit, 0, arena, len);
}
UPB_INLINE char* perftools_profiles_Function_serialize_ex(const perftools_profiles_Function* msg, int options,
                                 upb_Arena* arena, size_t* len) {
  return upb_Encode(msg, &perftools_profiles_Function_msginit, options, arena, len);
}
UPB_INLINE void perftools_profiles_Function_clear_id(const perftools_profiles_Function* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t) = 0;
}
UPB_INLINE uint64_t perftools_profiles_Function_id(const perftools_profiles_Function* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t);
}
UPB_INLINE void perftools_profiles_Function_clear_name(const perftools_profiles_Function* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Function_name(const perftools_profiles_Function* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t);
}
UPB_INLINE void perftools_profiles_Function_clear_system_name(const perftools_profiles_Function* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Function_system_name(const perftools_profiles_Function* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int64_t);
}
UPB_INLINE void perftools_profiles_Function_clear_filename(const perftools_profiles_Function* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Function_filename(const perftools_profiles_Function* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(24, 24), int64_t);
}
UPB_INLINE void perftools_profiles_Function_clear_start_line(const perftools_profiles_Function* msg) {
  *UPB_PTR_AT(msg, UPB_SIZE(32, 32), int64_t) = 0;
}
UPB_INLINE int64_t perftools_profiles_Function_start_line(const perftools_profiles_Function* msg) {
  return *UPB_PTR_AT(msg, UPB_SIZE(32, 32), int64_t);
}

UPB_INLINE void perftools_profiles_Function_set_id(perftools_profiles_Function *msg, uint64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(0, 0), uint64_t) = value;
}
UPB_INLINE void perftools_profiles_Function_set_name(perftools_profiles_Function *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(8, 8), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Function_set_system_name(perftools_profiles_Function *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(16, 16), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Function_set_filename(perftools_profiles_Function *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(24, 24), int64_t) = value;
}
UPB_INLINE void perftools_profiles_Function_set_start_line(perftools_profiles_Function *msg, int64_t value) {
  *UPB_PTR_AT(msg, UPB_SIZE(32, 32), int64_t) = value;
}

extern const upb_MiniTable_File pprof_proto_upb_file_layout;

#ifdef __cplusplus
}  /* extern "C" */
#endif

#include "upb/port_undef.inc"

#endif  /* PPROF_PROTO_UPB_H_ */
